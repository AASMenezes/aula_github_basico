---
title: "Usando GitHub com R e RStudio"
description: "Aprenda a integrar GitHub e RStudio para versionamento de projetos de an√°lise de dados."
author:
  - name: Alessandra Menezes
    email: aasmenezes@unifesp.br
    affiliations:
      - name: Universidade Federal de S√£o Paulo (UNIFESP) 
        url: https://unifesp.br/
date: today
lang: pt
toc: true
toc-location: left
toc-title: Conte√∫do
number-sections: false
highlight-style: pygments
format: 
  html:
    code-fold: true
    code-tools: true
    code-link: true
    df-print: kable
    embed-resources: true
    include-in-header: "include/open_links.html"
theme:
  light: flatly
  dark: darkly
---

[**Link para o reposit√≥rio desse tutorial no GitHub**](https://github.com/AASMenezes/aula_github_basico)

# Introdu√ß√£o

Este tutorial mostra como usar GitHub com RStudio em projetos de an√°lise de dados com R. Voc√™ aprender√° a instalar os softwares necess√°rios, configurar seu ambiente, criar reposit√≥rios e trabalhar com versionamento.

------------------------------------------------------------------------

# 1. Conceitos b√°sicos

## O que √© Git e GitHub?

- [**Git**](https://git-scm.com/) √© um sistema de controle de vers√£o local. Ele permite rastrear altera√ß√µes no c√≥digo, colaborar com outros e manter um hist√≥rico de vers√µes.

![Git logo](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png){fig-align="center" width=120}

-   [**GitHub**](https://github.com/) √© uma plataforma online para hospedar reposit√≥rios Git.

![GitHub logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){fig-align="center" width=120}

------------------------------------------------------------------------

# 2. Configura√ß√£o do ambiente

Para usar o Git juntamente com o RStudio, voc√™ precisa instalar o Git no seu computador. 

1. Fa√ßa o [download conforme seu sistema operacional](https://git-scm.com/downloads) e siga as [instru√ß√µes de instala√ß√£o](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
2. Depois, v√° at√© o menu: `Tools > Global Options > Git/SVN`
3. Se o campo **Git executable** estiver vazio ou com erro, ser√° necess√°rio configurar o caminho do execut√°vel do Git.
4. Localize o caminho correto e preencha o campo **Git executable**:
  - **Windows:** `C:/Program Files/Git/bin/git.exe`
  - **MacOS/Linux:** `/usr/bin/git` (em geral)
5. Clique em **OK** para salvar as configura√ß√µes.
6. Abra o terminal do RStudio e configure seu nome e email do Git:

    git config --global user.name "Seu Nome"
    git config --global user.email "email@example.com"

6. Abra o terminal integrado do RStudio (`Tools > Terminal > New Terminal`). Devem ficar visiveis dois elemento visuais: o menu suspenso "Git/Controle" de vers√£o e a guia "Git/Controle de vers√£o".

![Elementos visuais relacionados ao Git](https://docs.posit.co/ide/user/ide/guide/tools/images/rstudio-vcs-pane-labeled.png){fig-align="center"}

------------------------------------------------------------------------

# 3. Principais termos

1. **Reposit√≥rio**: pasta do projeto com controle de vers√£o
2. **Clone**: copiar um reposit√≥rio remoto para o local
3. **Fork**: criar uma c√≥pia de um reposit√≥rio para modificar
4. **Commit**: um registro de altera√ß√µes
5. **Push**: enviar altera√ß√µes para o GitHub a partir do RStudio
6. **Pull**: baixar altera√ß√µes do GitHub para o RStudio
7. **Branch**: uma linha paralela de desenvolvimento
8. **Merge**: unir branches diferentes

------------------------------------------------------------------------

# 4. Trabalhando com projeto com controle de vers√£o

## No GitHub

1. Crie um novo reposit√≥rio e d√™ um nome significativo, que identifique a natureza do projeto.
2. Marque a op√ß√£o "Add a README". Isso cria um arquivo README.md para descrever o projeto.
3. Escolha a licen√ßa (opcional, mas recomendado).
4. Clique em "Create repository".

## No RStudio

1. `File > New Project > Version Control > Git`
2. Cole a URL do reposit√≥rio
3. Clone o projeto localmente
4. Escolha o diret√≥rio onde o projeto ser√° salvo
5. Clique em "Create Project". Isso cria um novo projeto RStudio vinculado ao reposit√≥rio GitHub.
6. Trabalhe no projeto, adicionando arquivos, fazendo an√°lises.
7. Depois v√° para a aba "Git".
8. Voc√™ ver√° os arquivos modificados, novos arquivos e arquivos deletados.
9. Selecione os arquivos que deseja incluir no commit.
10. Clique em "Commit" para abrir a janela de commit.
11. Adicione uma mensagem de commit descritiva.
12. Clique em "Commit" para registrar as altera√ß√µes localmente.
13. Para enviar as altera√ß√µes para o GitHub, clique em "Push".
14. Para baixar as altera√ß√µes do GitHub, clique em "Pull".

------------------------------------------------------------------------

# 5. Atividade pr√°tica

1.  Crie `exercicio1.R`
2.  Adicione:

``` r
summary(mtcars)
```

3.  Fa√ßa commit e push
-   Edite o README diretamente no GitHub
-   Fa√ßa `Pull` no RStudio

------------------------------------------------------------------------

# 6. Dicas e boas pr√°ticas

-   Sempre trabalhe em um reposit√≥rio clonado localmente.
-   Sempre fa√ßa commits frequentes e significativos.
-   Use mensagens de commit claras e descritivas.
-   Mantenha o reposit√≥rio organizado com pastas para scripts, dados e resultados.
-   Use branches para desenvolver novas funcionalidades ou corrigir bugs.
-   Sempre fa√ßa pull antes de come√ßar a trabalhar para evitar conflitos.
-   Use o arquivo `.gitignore` para excluir arquivos tempor√°rios ou desnecess√°rios do controle de vers√£o.
-   Mantenha o README atualizado com informa√ß√µes sobre o projeto, como instala√ß√£o, uso e contribui√ß√µes.

# Para saber mais!

-  üìò [Happy Git with R](https://happygitwithr.com/)
-  üß∞ [Git Documentation](https://git-scm.com/doc)
-  üìñ [Pro Git](https://git-scm.com/book/en/v2)
-  üìö [GitHub Guides](https://guides.github.com/)
-  üß∞ [RStudio User Guide - Version Control with Git and GitHub](https://docs.posit.co/ide/user/ide/guide/tools/version-control.html)
- üìö [GitHub Education](https://github.com/education)
